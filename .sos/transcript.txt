Rscript:
    ## r script UUID: 35941609
    suppressPackageStartupMessages(library(rjson))
    suppressPackageStartupMessages(library(SummarizedExperiment))
    suppressPackageStartupMessages(library(survey))
    dscrutils:::empty_text(c("example/make_data_subset_indices/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2.stdout", "example/make_data_subset_indices/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2.stderr"))
    DSC_4616340B <- list()
    input.files <- c('example/get_config/get_config_1.rds','example/make_data_clean/get_config_1_get_data_1_make_data_clean_1.rds')
    for (i in 1:length(input.files)) DSC_4616340B <- dscrutils:::merge_lists(DSC_4616340B, readRDS(input.files[i]))
    DSC_REPLICATE <- DSC_4616340B$DSC_DEBUG$replicate
    args <- DSC_4616340B$config
    data_cleaned <- DSC_4616340B$data_cleaned
    sizes <- 90
    TIC_4616340B <- proc.time()
    set.seed(DSC_REPLICATE + 35941609)
    
    ## BEGIN DSC CORE
    generate_subsets <- function(mae, groupid, keepgroups, sizes, nreps, seed) {
      suppressPackageStartupMessages(library(Biobase))
      suppressPackageStartupMessages(library(MultiAssayExperiment))
    pdata <- colData(mae)
    if (length(groupid) > 1) {
      pdata[, paste(groupid, collapse = ".")] <-
        as.character(interaction(as.data.frame(pdata[, groupid])))
      groupid <- paste(groupid, collapse = ".")
    }
    if (is.null(keepgroups))
      keepgroups <- levels(factor(pdata[, groupid]))[1:2]
    keepsamples <- rownames(pdata[pdata[, groupid] %in% keepgroups, , drop = FALSE])
    pdata <- droplevels(pdata[match(keepsamples, rownames(pdata)), , drop = FALSE])
    condt <- as.character(pdata[, groupid])
    names(condt) <- rownames(pdata)
    ngroups <- nlevels(factor(condt))
    message("Considering the following ", ngroups, ifelse(ngroups == 1, " group: ", " groups: "),
            paste(levels(factor(condt)), collapse = " vs "))
    names(sizes) <- sizes
    names(nreps) <- sizes
    set.seed(seed)
    if (length(unique(condt)) == 1) {
      condt <- condt[sort(sample(1:length(condt), 2 * max(sizes)))]
    } else {
      condt <- condt[sort(stratsample(as.character(condt),
                                      structure(rep(max(sizes), 2),
                                                names = levels(factor(condt)))))]
    }
    keep_tmp <- lapply(sizes, function(sz) {
      unique(t(sapply(1:nreps[as.character(sz)], function(i) {
        if (length(unique(condt)) == 1) {
          tmpn <- names(condt)
          condt2 <- paste0(condt, ".", sample(rep(c("1", "2"), ceiling(length(condt)/2)))[1:length(condt)])
          names(condt2) <- tmpn
          ngroups <- 2
        } else {
          condt2 <- condt
        }
        smp <- names(condt2)[sort(stratsample(as.character(condt2),
                                              structure(rep(sz, ngroups),
                                                        names = levels(factor(condt2)))))]
        cdt <- condt2[smp]
        paste(smp, cdt, sep = "___")
      })))
    })
    keep_samples <- lapply(keep_tmp, function(w) {
      rbind(apply(w, 2, function(s) sapply(strsplit(s, "___"), .subset, 1)))})
    out_condition <- lapply(keep_tmp, function(w) {
      rbind(apply(w, 2, function(s) sapply(strsplit(s, "___"), .subset, 2)))})
    return(list(keep_samples = keep_samples, out_condition = out_condition))
    }
     data_subset_indices <- generate_subsets(data_cleaned, args$groupid, args$keepgroups, sizes, 1, args$seed)
    ## END DSC CORE
    
    saveRDS(list(data_subset_indices=data_subset_indices, DSC_DEBUG=list(time=as.list(proc.time() - TIC_4616340B), script=dscrutils:::load_script(), replicate=DSC_REPLICATE, session=toString(sessionInfo()))), 'example/make_data_subset_indices/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2.rds')
    dscrutils:::rm_if_empty(c("example/make_data_subset_indices/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2.stdout", "example/make_data_subset_indices/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2.stderr"))
    
    
    
Rscript:
    ## r script UUID: 83912069
    library(MultiAssayExperiment)
    suppressPackageStartupMessages(library(rjson))
    suppressPackageStartupMessages(library(tximport))
    suppressPackageStartupMessages(library(survey))
    suppressPackageStartupMessages(library(tidyr))
    suppressPackageStartupMessages(library(SummarizedExperiment))
    dscrutils:::empty_text(c("example/make_data_subset/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2.stdout", "example/make_data_subset/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2.stderr"))
    DSC_C8ABFFC0 <- list()
    input.files <- c('example/get_config/get_config_1.rds','example/make_data_clean/get_config_1_get_data_1_make_data_clean_1.rds','example/make_data_subset_indices/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2.rds')
    for (i in 1:length(input.files)) DSC_C8ABFFC0 <- dscrutils:::merge_lists(DSC_C8ABFFC0, readRDS(input.files[i]))
    DSC_REPLICATE <- DSC_C8ABFFC0$DSC_DEBUG$replicate
    args <- DSC_C8ABFFC0$config
    data_cleaned <- DSC_C8ABFFC0$data_cleaned
    data_subset_indices <- DSC_C8ABFFC0$data_subset_indices
    TIC_C8ABFFC0 <- proc.time()
    set.seed(DSC_REPLICATE + 83912069)
    
    ## BEGIN DSC CORE
    impute_dropouts <- function(count, tpm, condt, avetxlength, imputationmethod) {
      if (imputationmethod == "scimpute") {
        source("scripts/scimpute_dropouts.R")
        imputed <- scimpute_dropouts(count = count, tpm = tpm, condt = condt,
                                     avetxlength = avetxlength)
      } else if (imputationmethod == "drimpute") {
        source("scripts/drimpute_dropouts.R")
        imputed <- drimpute_dropouts(count = count, tpm = tpm, condt = condt,
                                     avetxlength = avetxlength)
      } else if (imputationmethod == "knnsmooth") {
        source("scripts/knnsmooth_dropouts.R")
        imputed <- knnsmooth_dropouts(count = count, tpm = tpm, condt = condt,
                                      avetxlength = avetxlength)
      }
      imputed
    }
    clean_mae <- function(mae, groupid) {
      library(SummarizedExperiment)
      mae@sampleMap$assay <- factor(mae@sampleMap$assay)
      mae <- updateObject(mae)
      mae2 <- subsetByRow(mae, grep("^ERCC-", unique(unlist(rownames(mae))),
                                    invert = TRUE, value = TRUE))
      for (m in names(experiments(mae2))) {
        SummarizedExperiment::assays(experiments(mae2)[[m]])[["TPM"]] <- sweep(SummarizedExperiment::assays(experiments(mae2)[[m]])[["TPM"]],
                2, colSums(SummarizedExperiment::assays(experiments(mae2)[[m]])[["TPM"]]), "/") * 1e6
      }
      if (length(groupid) > 1) {
        if (paste0(R.Version()$major, ".", R.Version()$minor) < "3.4") {
          Biobase::pData(mae2)[, paste(groupid, collapse = ".")] <-
            as.character(interaction(as.data.frame(Biobase::pData(mae2)[, groupid])))
          groupid <- paste(groupid, collapse = ".")
        } else {
          colData(mae2)[, paste(groupid, collapse = ".")] <-
            as.character(interaction(as.data.frame(colData(mae2)[, groupid])))
          groupid <- paste(groupid, collapse = ".")
        }
      }
      mae2
    }
    subset_mae <- function(mae, keep_samples, sz, i, imposed_condition, filt,
                           groupid = NULL, impute = NULL) {
      mae@sampleMap$assay <- factor(mae@sampleMap$assay)
      mae <- updateObject(mae)
      s <- keep_samples[[as.character(sz)]][i, ]
      count <- assays(experiments(mae)[["gene"]])[["count_lstpm"]][, s]
      tpm <- assays(experiments(mae)[["gene"]])[["TPM"]][, s]
      avetxlength = assays(experiments(mae)[["gene"]])[["avetxlength"]]
      if (!is.null(imposed_condition)) {
        if (paste0(R.Version()$major, ".", R.Version()$minor) < "3.4") {
          condt <- structure(imposed_condition[[as.character(sz)]][i, ],
                             names = rownames(Biobase::pData(mae)[s, ]))
        } else {
          condt <- structure(imposed_condition[[as.character(sz)]][i, ],
                             names = rownames(colData(mae)[s, ]))
        }
      } else {
        if (is.null(groupid)) stop("Must provide groupid")
        if (paste0(R.Version()$major, ".", R.Version()$minor) < "3.4") {
          condt <- structure(as.character(Biobase::pData(mae)[s, groupid]),
                             names = rownames(Biobase::pData(mae)[s, ]))
        } else {
          condt <- structure(as.character(colData(mae)[s, groupid]),
                             names = rownames(colData(mae)[s, ]))
        }
      }
      if (!is.null(impute) && impute != "no" && !is.na(impute)) {
        imputed <- impute_dropouts(count = count, tpm = tpm, condt = condt,
                                   avetxlength = avetxlength,
                                   imputationmethod = impute)
        count <- imputed$count
        tpm <- imputed$tpm
        condt <- imputed$condt
        nimp <- imputed$nimp  ## number of imputed values
      } else {
        nimp <- NULL
      }
      if (filt == "") {
        count <- count[rowSums(count) > 0, ]
        tpm <- tpm[rowSums(tpm) > 0, ]
      } else {
        filt <- strsplit(filt, "_")[[1]]
        if (substr(filt[3], nchar(filt[3]), nchar(filt[3])) == "p") {
          (nbr <- as.numeric(gsub("p", "", filt[3]))/100 * ncol(count))
        } else {
          (nbr <- as.numeric(filt[3]))
        }
        if (filt[1] == "count") {
          keep_rows <- rownames(count)[which(rowSums(count > as.numeric(filt[2]))
                                             > nbr)]
        } else if (filt[1] == "TPM") {
          keep_rows <- rownames(tpm)[which(rowSums(tpm > as.numeric(filt[2]))
                                           > nbr)]
        } else {
          stop("First element of filt must be 'count' or 'TPM'.")
        }
        count <- count[match(keep_rows, rownames(count)), ]
        tpm <- tpm[match(keep_rows, rownames(tpm)), ]
      }
      stopifnot(all(names(condt) == colnames(count)))
      stopifnot(all(names(condt) == colnames(tpm)))
      stopifnot(length(unique(condt)) == 2)
      summary(colSums(count))
      summary(rowSums(count))
      summary(rowSums(tpm))
      if (!is.null(nimp)) {
        nimp <- nimp[match(rownames(count), rownames(nimp)), ]
      }
      list(count = count, tpm = tpm, condt = condt, nimp = nimp)
    }
    suppressPackageStartupMessages(library(reshape2))
    suppressPackageStartupMessages(library(GEOquery))
    suppressPackageStartupMessages(library(dplyr))
    suppressPackageStartupMessages(library(Biobase))
    suppressPackageStartupMessages(library(MultiAssayExperiment))
    make_subsets <- function(data_subset_indices, mae, nrep = 1, filt="", impute) {
      keep_samples <- data_subset_indices$keep_samples
      imposed_condition <- data_subset_indices$out_condition
      sz <- as.numeric(names(keep_samples)[1])
      L <- subset_mae(mae = mae, keep_samples = keep_samples, sz = sz, i = nrep,
                      imposed_condition = imposed_condition, filt = filt, impute = impute)
      return(L)
    }
     data_subset <- make_subsets(data_subset_indices=data_subset_indices, mae=data_cleaned, nrep = 1, filt="", impute=args$impute)
    ## END DSC CORE
    
    saveRDS(list(data_subset=data_subset, DSC_DEBUG=list(time=as.list(proc.time() - TIC_C8ABFFC0), script=dscrutils:::load_script(), replicate=DSC_REPLICATE, session=toString(sessionInfo()))), 'example/make_data_subset/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2.rds')
    dscrutils:::rm_if_empty(c("example/make_data_subset/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2.stdout", "example/make_data_subset/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2.stderr"))
    
    
    
Rscript:
    ## r script UUID: 13262997
    suppressPackageStartupMessages(library(edgeR))
    dscrutils:::empty_text(c("example/apply_wilcoxon/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_wilcoxon_2.stdout", "example/apply_wilcoxon/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_wilcoxon_2.stderr"))
    DSC_A9EFB4B3 <- readRDS("example/make_data_subset/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2.rds")
    DSC_REPLICATE <- DSC_A9EFB4B3$DSC_DEBUG$replicate
    data_subset <- DSC_A9EFB4B3$data_subset
    TIC_A9EFB4B3 <- proc.time()
    set.seed(DSC_REPLICATE + 13262997)
    
    ## BEGIN DSC CORE
    run_Wilcoxon <- function(L) {
      message("Wilcoxon")
      session_info <- sessionInfo()
      timing <- system.time({
        tmm <- edgeR::calcNormFactors(L$tpm)
        tpmtmm <- edgeR::cpm(L$tpm, lib.size = tmm * colSums(L$tpm))
        idx <- 1:nrow(tpmtmm)
        names(idx) <- rownames(tpmtmm)
        wilcox_p <- sapply(idx, function(i) {
          wilcox.test(tpmtmm[i, ] ~ L$condt)$p.value
        })
      })
      hist(wilcox_p, 50)
      list(session_info = session_info,
           timing = timing,
           df = data.frame(pval = wilcox_p,
                           row.names = names(wilcox_p)))
    }
    output <- run_Wilcoxon(data_subset)
    ## END DSC CORE
    
    saveRDS(list(pval=output$df$pval, timing=output$df$timing, DSC_DEBUG=list(time=as.list(proc.time() - TIC_A9EFB4B3), script=dscrutils:::load_script(), replicate=DSC_REPLICATE, session=toString(sessionInfo()))), 'example/apply_wilcoxon/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_wilcoxon_2.rds')
    dscrutils:::rm_if_empty(c("example/apply_wilcoxon/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_wilcoxon_2.stdout", "example/apply_wilcoxon/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_wilcoxon_2.stderr"))
    
    
    
Rscript:
    ## r script UUID: 67083057
    suppressPackageStartupMessages(library(limma))
    dscrutils:::empty_text(c("example/apply_limmatrend/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_1_make_data_subset_1_apply_limmatrend_1.stdout", "example/apply_limmatrend/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_1_make_data_subset_1_apply_limmatrend_1.stderr"))
    DSC_87691E20 <- readRDS("example/make_data_subset/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_1_make_data_subset_1.rds")
    DSC_REPLICATE <- DSC_87691E20$DSC_DEBUG$replicate
    data_subset <- DSC_87691E20$data_subset
    TIC_87691E20 <- proc.time()
    set.seed(DSC_REPLICATE + 67083057)
    
    ## BEGIN DSC CORE
    suppressPackageStartupMessages(library(edgeR))
    run_limmatrend <- function(L) {
      message("limmatrend")
      session_info <- sessionInfo()
      timing <- system.time({
        dge <- DGEList(L$count, group = L$condt)
        dge <- calcNormFactors(dge)
        design <- model.matrix(~L$condt)
        y <- new("EList")
        y$E <- edgeR::cpm(dge, log = TRUE, prior.count = 3)
        fit <- lmFit(y, design = design)
        fit <- eBayes(fit, trend = TRUE, robust = TRUE)
        tt <- topTable(fit, n = Inf, adjust.method = "BH")
      })
      hist(tt$P.Value, 50)
      hist(tt$adj.P.Val, 50)
      limma::plotMDS(dge, col = as.numeric(as.factor(L$condt)), pch = 19)
      plotMD(fit)
      list(session_info = session_info,
           timing = timing,
           tt = tt,
           df = data.frame(pval = tt$P.Value,
                           padj = tt$adj.P.Val,
                           row.names = rownames(tt)))
    }
    output <- run_limmatrend(data_subset)
    ## END DSC CORE
    
    saveRDS(list(pval=output$df$pval, timing=output$df$timing, DSC_DEBUG=list(time=as.list(proc.time() - TIC_87691E20), script=dscrutils:::load_script(), replicate=DSC_REPLICATE, session=toString(sessionInfo()))), 'example/apply_limmatrend/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_1_make_data_subset_1_apply_limmatrend_1.rds')
    dscrutils:::rm_if_empty(c("example/apply_limmatrend/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_1_make_data_subset_1_apply_limmatrend_1.stdout", "example/apply_limmatrend/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_1_make_data_subset_1_apply_limmatrend_1.stderr"))
    
    
    
Rscript:
    ## r script UUID: 67083057
    suppressPackageStartupMessages(library(limma))
    dscrutils:::empty_text(c("example/apply_limmatrend/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_2_make_data_subset_1_apply_limmatrend_1.stdout", "example/apply_limmatrend/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_2_make_data_subset_1_apply_limmatrend_1.stderr"))
    DSC_87691E20 <- readRDS("example/make_data_subset/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2.rds")
    DSC_REPLICATE <- DSC_87691E20$DSC_DEBUG$replicate
    data_subset <- DSC_87691E20$data_subset
    TIC_87691E20 <- proc.time()
    set.seed(DSC_REPLICATE + 67083057)
    
    ## BEGIN DSC CORE
    suppressPackageStartupMessages(library(edgeR))
    run_limmatrend <- function(L) {
      message("limmatrend")
      session_info <- sessionInfo()
      timing <- system.time({
        dge <- DGEList(L$count, group = L$condt)
        dge <- calcNormFactors(dge)
        design <- model.matrix(~L$condt)
        y <- new("EList")
        y$E <- edgeR::cpm(dge, log = TRUE, prior.count = 3)
        fit <- lmFit(y, design = design)
        fit <- eBayes(fit, trend = TRUE, robust = TRUE)
        tt <- topTable(fit, n = Inf, adjust.method = "BH")
      })
      hist(tt$P.Value, 50)
      hist(tt$adj.P.Val, 50)
      limma::plotMDS(dge, col = as.numeric(as.factor(L$condt)), pch = 19)
      plotMD(fit)
      list(session_info = session_info,
           timing = timing,
           tt = tt,
           df = data.frame(pval = tt$P.Value,
                           padj = tt$adj.P.Val,
                           row.names = rownames(tt)))
    }
    output <- run_limmatrend(data_subset)
    ## END DSC CORE
    
    saveRDS(list(pval=output$df$pval, timing=output$df$timing, DSC_DEBUG=list(time=as.list(proc.time() - TIC_87691E20), script=dscrutils:::load_script(), replicate=DSC_REPLICATE, session=toString(sessionInfo()))), 'example/apply_limmatrend/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_2_make_data_subset_1_apply_limmatrend_1.rds')
    dscrutils:::rm_if_empty(c("example/apply_limmatrend/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_2_make_data_subset_1_apply_limmatrend_1.stdout", "example/apply_limmatrend/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_2_make_data_subset_1_apply_limmatrend_1.stderr"))
    
    
    
Rscript:
    ## r script UUID: 5901230
    suppressPackageStartupMessages(library(edgeR))
    dscrutils:::empty_text(c("example/apply_ttest/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_ttest_2.stdout", "example/apply_ttest/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_ttest_2.stderr"))
    DSC_5C6ECB02 <- readRDS("example/make_data_subset/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2.rds")
    DSC_REPLICATE <- DSC_5C6ECB02$DSC_DEBUG$replicate
    data_subset <- DSC_5C6ECB02$data_subset
    TIC_5C6ECB02 <- proc.time()
    set.seed(DSC_REPLICATE + 5901230)
    
    ## BEGIN DSC CORE
    suppressPackageStartupMessages(library(genefilter))
    run_ttest <- function(L) {
      message("t-test")
      session_info <- sessionInfo()
      timing <- system.time({
        tmm <- edgeR::calcNormFactors(L$tpm)
        tpmtmm <- edgeR::cpm(L$tpm, lib.size = tmm * colSums(L$tpm))
        logtpm <- log2(tpmtmm + 1)
        idx <- seq_len(nrow(logtpm))
        names(idx) <- rownames(logtpm)
        ttest_p <- sapply(idx, function(i) {
          t.test(logtpm[i, ] ~ L$condt)$p.value
        })
      })
      hist(ttest_p, 50)
      list(session_info = session_info,
           timing = timing,
           df = data.frame(pval = ttest_p,
                           row.names = names(ttest_p)))
    }
    output <- run_ttest(data_subset)
    ## END DSC CORE
    
    saveRDS(list(pval=output$df$pval, timing=output$df$timing, DSC_DEBUG=list(time=as.list(proc.time() - TIC_5C6ECB02), script=dscrutils:::load_script(), replicate=DSC_REPLICATE, session=toString(sessionInfo()))), 'example/apply_ttest/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_ttest_2.rds')
    dscrutils:::rm_if_empty(c("example/apply_ttest/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_ttest_2.stdout", "example/apply_ttest/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_ttest_2.stderr"))
    
    
    
Rscript:
    ## r script UUID: 5557756
    library(stats)
    dscrutils:::empty_text(c("example/get_nsig/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_1_make_data_subset_1_apply_limmatrend_1_get_nsig_1.stdout", "example/get_nsig/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_1_make_data_subset_1_apply_limmatrend_1_get_nsig_1.stderr"))
    DSC_42F7B464 <- readRDS("example/apply_limmatrend/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_1_make_data_subset_1_apply_limmatrend_1.rds")
    DSC_REPLICATE <- DSC_42F7B464$DSC_DEBUG$replicate
    pval <- DSC_42F7B464$pval
    TIC_42F7B464 <- proc.time()
    set.seed(DSC_REPLICATE + 5557756)
    
    ## BEGIN DSC CORE
    nsig <- sum(p.adjust(pval)<.05)
    ## END DSC CORE
    
    saveRDS(list(nsig=nsig, DSC_DEBUG=list(time=as.list(proc.time() - TIC_42F7B464), script=dscrutils:::load_script(), replicate=DSC_REPLICATE, session=toString(sessionInfo()))), 'example/get_nsig/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_1_make_data_subset_1_apply_limmatrend_1_get_nsig_1.rds')
    dscrutils:::rm_if_empty(c("example/get_nsig/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_1_make_data_subset_1_apply_limmatrend_1_get_nsig_1.stdout", "example/get_nsig/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_1_make_data_subset_1_apply_limmatrend_1_get_nsig_1.stderr"))
    
    
    
Rscript:
    ## r script UUID: 5557756
    library(stats)
    dscrutils:::empty_text(c("example/get_nsig/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_2_make_data_subset_1_apply_limmatrend_1_get_nsig_1.stdout", "example/get_nsig/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_2_make_data_subset_1_apply_limmatrend_1_get_nsig_1.stderr"))
    DSC_42F7B464 <- readRDS("example/apply_limmatrend/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_2_make_data_subset_1_apply_limmatrend_1.rds")
    DSC_REPLICATE <- DSC_42F7B464$DSC_DEBUG$replicate
    pval <- DSC_42F7B464$pval
    TIC_42F7B464 <- proc.time()
    set.seed(DSC_REPLICATE + 5557756)
    
    ## BEGIN DSC CORE
    nsig <- sum(p.adjust(pval)<.05)
    ## END DSC CORE
    
    saveRDS(list(nsig=nsig, DSC_DEBUG=list(time=as.list(proc.time() - TIC_42F7B464), script=dscrutils:::load_script(), replicate=DSC_REPLICATE, session=toString(sessionInfo()))), 'example/get_nsig/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_2_make_data_subset_1_apply_limmatrend_1_get_nsig_1.rds')
    dscrutils:::rm_if_empty(c("example/get_nsig/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_2_make_data_subset_1_apply_limmatrend_1_get_nsig_1.stdout", "example/get_nsig/get_config_1_get_data_1_make_data_clean_1_make_data_subset_indices_2_make_data_subset_1_apply_limmatrend_1_get_nsig_1.stderr"))
    
    
    
Rscript:
    ## r script UUID: 5557756
    library(stats)
    dscrutils:::empty_text(c("example/get_nsig/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_ttest_2_get_nsig_2.stdout", "example/get_nsig/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_ttest_2_get_nsig_2.stderr"))
    DSC_42F7B464 <- readRDS("example/apply_ttest/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_ttest_2.rds")
    DSC_REPLICATE <- DSC_42F7B464$DSC_DEBUG$replicate
    pval <- DSC_42F7B464$pval
    TIC_42F7B464 <- proc.time()
    set.seed(DSC_REPLICATE + 5557756)
    
    ## BEGIN DSC CORE
    nsig <- sum(p.adjust(pval)<.05)
    ## END DSC CORE
    
    saveRDS(list(nsig=nsig, DSC_DEBUG=list(time=as.list(proc.time() - TIC_42F7B464), script=dscrutils:::load_script(), replicate=DSC_REPLICATE, session=toString(sessionInfo()))), 'example/get_nsig/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_ttest_2_get_nsig_2.rds')
    dscrutils:::rm_if_empty(c("example/get_nsig/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_ttest_2_get_nsig_2.stdout", "example/get_nsig/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_ttest_2_get_nsig_2.stderr"))
    
    
    
Rscript:
    ## r script UUID: 5557756
    library(stats)
    dscrutils:::empty_text(c("example/get_nsig/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_wilcoxon_2_get_nsig_2.stdout", "example/get_nsig/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_wilcoxon_2_get_nsig_2.stderr"))
    DSC_42F7B464 <- readRDS("example/apply_wilcoxon/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_wilcoxon_2.rds")
    DSC_REPLICATE <- DSC_42F7B464$DSC_DEBUG$replicate
    pval <- DSC_42F7B464$pval
    TIC_42F7B464 <- proc.time()
    set.seed(DSC_REPLICATE + 5557756)
    
    ## BEGIN DSC CORE
    nsig <- sum(p.adjust(pval)<.05)
    ## END DSC CORE
    
    saveRDS(list(nsig=nsig, DSC_DEBUG=list(time=as.list(proc.time() - TIC_42F7B464), script=dscrutils:::load_script(), replicate=DSC_REPLICATE, session=toString(sessionInfo()))), 'example/get_nsig/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_wilcoxon_2_get_nsig_2.rds')
    dscrutils:::rm_if_empty(c("example/get_nsig/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_wilcoxon_2_get_nsig_2.stdout", "example/get_nsig/get_config_2_get_data_2_make_data_clean_2_make_data_subset_indices_2_make_data_subset_2_apply_wilcoxon_2_get_nsig_2.stderr"))
    
    
    
