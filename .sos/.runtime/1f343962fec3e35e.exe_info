7dfe7a7689a4ded8
# input
example/get_config/get_config_1.rds	718d4ec634fe21f7
example/get_data/get_config_1_get_data_1.rds	ba95e08b55cd47a2
# output
example/make_data_clean/get_config_1_get_data_1_make_data_clean_1.rds	4a1c89311e58157c
# dependent
# init context
DSC_STEP_ID_=22602816
_input:=b'gANjc29zLnRhcmdldHMKc29zX3RhcmdldHMKcQApgXEBXXECKGNzb3MudGFyZ2V0cwpmaWxlX3RhcmdldApxA1gHAAAAZXhhbXBsZXEEWAoAAABnZXRfY29uZmlncQVYEAAAAGdldF9jb25maWdfMS5yZHNxBodxB1JxCGgDaARYCAAAAGdldF9kYXRhcQlYGwAAAGdldF9jb25maWdfMV9nZXRfZGF0YV8xLnJkc3EKh3ELUnEMZWIu'
_output:=b'gANjc29zLnRhcmdldHMKc29zX3RhcmdldHMKcQApgXEBXXECY3Nvcy50YXJnZXRzCmZpbGVfdGFyZ2V0CnEDWAcAAABleGFtcGxlcQRYDwAAAG1ha2VfZGF0YV9jbGVhbnEFWC0AAABnZXRfY29uZmlnXzFfZ2V0X2RhdGFfMV9tYWtlX2RhdGFfY2xlYW5fMS5yZHNxBodxB1JxCGFiLg=='
# end context
DSC_STEP_ID_=22602816
_input:=b'gANjc29zLnRhcmdldHMKc29zX3RhcmdldHMKcQApgXEBXXECKGNzb3MudGFyZ2V0cwpmaWxlX3RhcmdldApxA1gHAAAAZXhhbXBsZXEEWAoAAABnZXRfY29uZmlncQVYEAAAAGdldF9jb25maWdfMS5yZHNxBodxB1JxCGgDaARYCAAAAGdldF9kYXRhcQlYGwAAAGdldF9jb25maWdfMV9nZXRfZGF0YV8xLnJkc3EKh3ELUnEMZWIu'
_output:=b'gANjc29zLnRhcmdldHMKc29zX3RhcmdldHMKcQApgXEBXXECY3Nvcy50YXJnZXRzCmZpbGVfdGFyZ2V0CnEDWAcAAABleGFtcGxlcQRYDwAAAG1ha2VfZGF0YV9jbGVhbnEFWC0AAABnZXRfY29uZmlnXzFfZ2V0X2RhdGFfMV9tYWtlX2RhdGFfY2xlYW5fMS5yZHNxBodxB1JxCGFiLg=='
# step process
DSC_STEP_ID_ = 22602816

R ( fr"""## r script UUID: {DSC_STEP_ID_}
library(MultiAssayExperiment)
dscrutils:::empty_text(c("{_output:n}.stdout", "{_output:n}.stderr"))
DSC_344B94FD <- list()
input.files <- c({_input:r,})
for (i in 1:length(input.files)) DSC_344B94FD <- dscrutils:::merge_lists(DSC_344B94FD, readRDS(input.files[i]))
DSC_REPLICATE <- DSC_344B94FD$DSC_DEBUG$replicate
args <- DSC_344B94FD$config
data_raw <- DSC_344B94FD$data_raw
TIC_344B94FD <- proc.time()
set.seed(DSC_REPLICATE + {DSC_STEP_ID_})

## BEGIN DSC CORE
impute_dropouts <- function(count, tpm, condt, avetxlength, imputationmethod) {{
  if (imputationmethod == "scimpute") {{
    source("scripts/scimpute_dropouts.R")
    imputed <- scimpute_dropouts(count = count, tpm = tpm, condt = condt,
                                 avetxlength = avetxlength)
  }} else if (imputationmethod == "drimpute") {{
    source("scripts/drimpute_dropouts.R")
    imputed <- drimpute_dropouts(count = count, tpm = tpm, condt = condt,
                                 avetxlength = avetxlength)
  }} else if (imputationmethod == "knnsmooth") {{
    source("scripts/knnsmooth_dropouts.R")
    imputed <- knnsmooth_dropouts(count = count, tpm = tpm, condt = condt,
                                  avetxlength = avetxlength)
  }}
  imputed
}}
clean_mae <- function(mae, groupid) {{
  library(SummarizedExperiment)
  mae@sampleMap$assay <- factor(mae@sampleMap$assay)
  mae <- updateObject(mae)
  mae2 <- subsetByRow(mae, grep("^ERCC-", unique(unlist(rownames(mae))),
                                invert = TRUE, value = TRUE))
  for (m in names(experiments(mae2))) {{
    SummarizedExperiment::assays(experiments(mae2)[[m]])[["TPM"]] <- sweep(SummarizedExperiment::assays(experiments(mae2)[[m]])[["TPM"]],
            2, colSums(SummarizedExperiment::assays(experiments(mae2)[[m]])[["TPM"]]), "/") * 1e6
  }}
  if (length(groupid) > 1) {{
    if (paste0(R.Version()$major, ".", R.Version()$minor) < "3.4") {{
      Biobase::pData(mae2)[, paste(groupid, collapse = ".")] <-
        as.character(interaction(as.data.frame(Biobase::pData(mae2)[, groupid])))
      groupid <- paste(groupid, collapse = ".")
    }} else {{
      colData(mae2)[, paste(groupid, collapse = ".")] <-
        as.character(interaction(as.data.frame(colData(mae2)[, groupid])))
      groupid <- paste(groupid, collapse = ".")
    }}
  }}
  mae2
}}
subset_mae <- function(mae, keep_samples, sz, i, imposed_condition, filt,
                       groupid = NULL, impute = NULL) {{
  mae@sampleMap$assay <- factor(mae@sampleMap$assay)
  mae <- updateObject(mae)
  s <- keep_samples[[as.character(sz)]][i, ]
  count <- assays(experiments(mae)[["gene"]])[["count_lstpm"]][, s]
  tpm <- assays(experiments(mae)[["gene"]])[["TPM"]][, s]
  avetxlength = assays(experiments(mae)[["gene"]])[["avetxlength"]]
  if (!is.null(imposed_condition)) {{
    if (paste0(R.Version()$major, ".", R.Version()$minor) < "3.4") {{
      condt <- structure(imposed_condition[[as.character(sz)]][i, ],
                         names = rownames(Biobase::pData(mae)[s, ]))
    }} else {{
      condt <- structure(imposed_condition[[as.character(sz)]][i, ],
                         names = rownames(colData(mae)[s, ]))
    }}
  }} else {{
    if (is.null(groupid)) stop("Must provide groupid")
    if (paste0(R.Version()$major, ".", R.Version()$minor) < "3.4") {{
      condt <- structure(as.character(Biobase::pData(mae)[s, groupid]),
                         names = rownames(Biobase::pData(mae)[s, ]))
    }} else {{
      condt <- structure(as.character(colData(mae)[s, groupid]),
                         names = rownames(colData(mae)[s, ]))
    }}
  }}
  if (!is.null(impute) && impute != "no" && !is.na(impute)) {{
    imputed <- impute_dropouts(count = count, tpm = tpm, condt = condt,
                               avetxlength = avetxlength,
                               imputationmethod = impute)
    count <- imputed$count
    tpm <- imputed$tpm
    condt <- imputed$condt
    nimp <- imputed$nimp  ## number of imputed values
  }} else {{
    nimp <- NULL
  }}
  if (filt == "") {{
    count <- count[rowSums(count) > 0, ]
    tpm <- tpm[rowSums(tpm) > 0, ]
  }} else {{
    filt <- strsplit(filt, "_")[[1]]
    if (substr(filt[3], nchar(filt[3]), nchar(filt[3])) == "p") {{
      (nbr <- as.numeric(gsub("p", "", filt[3]))/100 * ncol(count))
    }} else {{
      (nbr <- as.numeric(filt[3]))
    }}
    if (filt[1] == "count") {{
      keep_rows <- rownames(count)[which(rowSums(count > as.numeric(filt[2]))
                                         > nbr)]
    }} else if (filt[1] == "TPM") {{
      keep_rows <- rownames(tpm)[which(rowSums(tpm > as.numeric(filt[2]))
                                       > nbr)]
    }} else {{
      stop("First element of filt must be 'count' or 'TPM'.")
    }}
    count <- count[match(keep_rows, rownames(count)), ]
    tpm <- tpm[match(keep_rows, rownames(tpm)), ]
  }}
  stopifnot(all(names(condt) == colnames(count)))
  stopifnot(all(names(condt) == colnames(tpm)))
  stopifnot(length(unique(condt)) == 2)
  summary(colSums(count))
  summary(rowSums(count))
  summary(rowSums(tpm))
  if (!is.null(nimp)) {{
    nimp <- nimp[match(rownames(count), rownames(nimp)), ]
  }}
  list(count = count, tpm = tpm, condt = condt, nimp = nimp)
}}
data_cleaned <- clean_mae(mae=data_raw, groupid=args$groupid)
## END DSC CORE

saveRDS(list(data_cleaned=data_cleaned, DSC_DEBUG=list(time=as.list(proc.time() - TIC_344B94FD), script=dscrutils:::load_script(), replicate=DSC_REPLICATE, session=toString(sessionInfo()))), {_output:r})
dscrutils:::rm_if_empty(c("{_output:n}.stdout", "{_output:n}.stderr"))


""" , workdir = './' , stderr = f"{_output:n}.stderr" , stdout = f"{_output:n}.stdout" ) 
 # step process
DSC_STEP_ID_ = 22602816

R ( fr"""## r script UUID: {DSC_STEP_ID_}
library(MultiAssayExperiment)
dscrutils:::empty_text(c("{_output:n}.stdout", "{_output:n}.stderr"))
DSC_344B94FD <- list()
input.files <- c({_input:r,})
for (i in 1:length(input.files)) DSC_344B94FD <- dscrutils:::merge_lists(DSC_344B94FD, readRDS(input.files[i]))
DSC_REPLICATE <- DSC_344B94FD$DSC_DEBUG$replicate
args <- DSC_344B94FD$config
data_raw <- DSC_344B94FD$data_raw
TIC_344B94FD <- proc.time()
set.seed(DSC_REPLICATE + {DSC_STEP_ID_})

## BEGIN DSC CORE
impute_dropouts <- function(count, tpm, condt, avetxlength, imputationmethod) {{
  if (imputationmethod == "scimpute") {{
    source("scripts/scimpute_dropouts.R")
    imputed <- scimpute_dropouts(count = count, tpm = tpm, condt = condt,
                                 avetxlength = avetxlength)
  }} else if (imputationmethod == "drimpute") {{
    source("scripts/drimpute_dropouts.R")
    imputed <- drimpute_dropouts(count = count, tpm = tpm, condt = condt,
                                 avetxlength = avetxlength)
  }} else if (imputationmethod == "knnsmooth") {{
    source("scripts/knnsmooth_dropouts.R")
    imputed <- knnsmooth_dropouts(count = count, tpm = tpm, condt = condt,
                                  avetxlength = avetxlength)
  }}
  imputed
}}
clean_mae <- function(mae, groupid) {{
  library(SummarizedExperiment)
  mae@sampleMap$assay <- factor(mae@sampleMap$assay)
  mae <- updateObject(mae)
  mae2 <- subsetByRow(mae, grep("^ERCC-", unique(unlist(rownames(mae))),
                                invert = TRUE, value = TRUE))
  for (m in names(experiments(mae2))) {{
    SummarizedExperiment::assays(experiments(mae2)[[m]])[["TPM"]] <- sweep(SummarizedExperiment::assays(experiments(mae2)[[m]])[["TPM"]],
            2, colSums(SummarizedExperiment::assays(experiments(mae2)[[m]])[["TPM"]]), "/") * 1e6
  }}
  if (length(groupid) > 1) {{
    if (paste0(R.Version()$major, ".", R.Version()$minor) < "3.4") {{
      Biobase::pData(mae2)[, paste(groupid, collapse = ".")] <-
        as.character(interaction(as.data.frame(Biobase::pData(mae2)[, groupid])))
      groupid <- paste(groupid, collapse = ".")
    }} else {{
      colData(mae2)[, paste(groupid, collapse = ".")] <-
        as.character(interaction(as.data.frame(colData(mae2)[, groupid])))
      groupid <- paste(groupid, collapse = ".")
    }}
  }}
  mae2
}}
subset_mae <- function(mae, keep_samples, sz, i, imposed_condition, filt,
                       groupid = NULL, impute = NULL) {{
  mae@sampleMap$assay <- factor(mae@sampleMap$assay)
  mae <- updateObject(mae)
  s <- keep_samples[[as.character(sz)]][i, ]
  count <- assays(experiments(mae)[["gene"]])[["count_lstpm"]][, s]
  tpm <- assays(experiments(mae)[["gene"]])[["TPM"]][, s]
  avetxlength = assays(experiments(mae)[["gene"]])[["avetxlength"]]
  if (!is.null(imposed_condition)) {{
    if (paste0(R.Version()$major, ".", R.Version()$minor) < "3.4") {{
      condt <- structure(imposed_condition[[as.character(sz)]][i, ],
                         names = rownames(Biobase::pData(mae)[s, ]))
    }} else {{
      condt <- structure(imposed_condition[[as.character(sz)]][i, ],
                         names = rownames(colData(mae)[s, ]))
    }}
  }} else {{
    if (is.null(groupid)) stop("Must provide groupid")
    if (paste0(R.Version()$major, ".", R.Version()$minor) < "3.4") {{
      condt <- structure(as.character(Biobase::pData(mae)[s, groupid]),
                         names = rownames(Biobase::pData(mae)[s, ]))
    }} else {{
      condt <- structure(as.character(colData(mae)[s, groupid]),
                         names = rownames(colData(mae)[s, ]))
    }}
  }}
  if (!is.null(impute) && impute != "no" && !is.na(impute)) {{
    imputed <- impute_dropouts(count = count, tpm = tpm, condt = condt,
                               avetxlength = avetxlength,
                               imputationmethod = impute)
    count <- imputed$count
    tpm <- imputed$tpm
    condt <- imputed$condt
    nimp <- imputed$nimp  ## number of imputed values
  }} else {{
    nimp <- NULL
  }}
  if (filt == "") {{
    count <- count[rowSums(count) > 0, ]
    tpm <- tpm[rowSums(tpm) > 0, ]
  }} else {{
    filt <- strsplit(filt, "_")[[1]]
    if (substr(filt[3], nchar(filt[3]), nchar(filt[3])) == "p") {{
      (nbr <- as.numeric(gsub("p", "", filt[3]))/100 * ncol(count))
    }} else {{
      (nbr <- as.numeric(filt[3]))
    }}
    if (filt[1] == "count") {{
      keep_rows <- rownames(count)[which(rowSums(count > as.numeric(filt[2]))
                                         > nbr)]
    }} else if (filt[1] == "TPM") {{
      keep_rows <- rownames(tpm)[which(rowSums(tpm > as.numeric(filt[2]))
                                       > nbr)]
    }} else {{
      stop("First element of filt must be 'count' or 'TPM'.")
    }}
    count <- count[match(keep_rows, rownames(count)), ]
    tpm <- tpm[match(keep_rows, rownames(tpm)), ]
  }}
  stopifnot(all(names(condt) == colnames(count)))
  stopifnot(all(names(condt) == colnames(tpm)))
  stopifnot(length(unique(condt)) == 2)
  summary(colSums(count))
  summary(rowSums(count))
  summary(rowSums(tpm))
  if (!is.null(nimp)) {{
    nimp <- nimp[match(rownames(count), rownames(nimp)), ]
  }}
  list(count = count, tpm = tpm, condt = condt, nimp = nimp)
}}
data_cleaned <- clean_mae(mae=data_raw, groupid=args$groupid)
## END DSC CORE

saveRDS(list(data_cleaned=data_cleaned, DSC_DEBUG=list(time=as.list(proc.time() - TIC_344B94FD), script=dscrutils:::load_script(), replicate=DSC_REPLICATE, session=toString(sessionInfo()))), {_output:r})
dscrutils:::rm_if_empty(c("{_output:n}.stdout", "{_output:n}.stderr"))


""" , workdir = './' , stderr = f"{_output:n}.stderr" , stdout = f"{_output:n}.stdout" ) 
 